//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MC.Website.GenresReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenreDto", Namespace="http://schemas.datacontract.org/2004/07/MC.ApplicationServices.DTOs")]
    [System.SerializableAttribute()]
    public partial class GenreDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GenresReference.IGenres")]
    public interface IGenres {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/GetGenres", ReplyAction="http://tempuri.org/IGenres/GetGenresResponse")]
        MC.Website.GenresReference.GenreDto[] GetGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/GetGenres", ReplyAction="http://tempuri.org/IGenres/GetGenresResponse")]
        System.Threading.Tasks.Task<MC.Website.GenresReference.GenreDto[]> GetGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/PostGenre", ReplyAction="http://tempuri.org/IGenres/PostGenreResponse")]
        string PostGenre(MC.Website.GenresReference.GenreDto genreDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/PostGenre", ReplyAction="http://tempuri.org/IGenres/PostGenreResponse")]
        System.Threading.Tasks.Task<string> PostGenreAsync(MC.Website.GenresReference.GenreDto genreDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/PutGenre", ReplyAction="http://tempuri.org/IGenres/PutGenreResponse")]
        string PutGenre(MC.Website.GenresReference.GenreDto genreDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/PutGenre", ReplyAction="http://tempuri.org/IGenres/PutGenreResponse")]
        System.Threading.Tasks.Task<string> PutGenreAsync(MC.Website.GenresReference.GenreDto genreDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/DeleteGenre", ReplyAction="http://tempuri.org/IGenres/DeleteGenreResponse")]
        string DeleteGenre(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/DeleteGenre", ReplyAction="http://tempuri.org/IGenres/DeleteGenreResponse")]
        System.Threading.Tasks.Task<string> DeleteGenreAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGenresChannel : MC.Website.GenresReference.IGenres, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenresClient : System.ServiceModel.ClientBase<MC.Website.GenresReference.IGenres>, MC.Website.GenresReference.IGenres {
        
        public GenresClient() {
        }
        
        public GenresClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GenresClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenresClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MC.Website.GenresReference.GenreDto[] GetGenres() {
            return base.Channel.GetGenres();
        }
        
        public System.Threading.Tasks.Task<MC.Website.GenresReference.GenreDto[]> GetGenresAsync() {
            return base.Channel.GetGenresAsync();
        }
        
        public string PostGenre(MC.Website.GenresReference.GenreDto genreDto) {
            return base.Channel.PostGenre(genreDto);
        }
        
        public System.Threading.Tasks.Task<string> PostGenreAsync(MC.Website.GenresReference.GenreDto genreDto) {
            return base.Channel.PostGenreAsync(genreDto);
        }
        
        public string PutGenre(MC.Website.GenresReference.GenreDto genreDto) {
            return base.Channel.PutGenre(genreDto);
        }
        
        public System.Threading.Tasks.Task<string> PutGenreAsync(MC.Website.GenresReference.GenreDto genreDto) {
            return base.Channel.PutGenreAsync(genreDto);
        }
        
        public string DeleteGenre(int id) {
            return base.Channel.DeleteGenre(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteGenreAsync(int id) {
            return base.Channel.DeleteGenreAsync(id);
        }
    }
}
